p12a$Type <- c("Train")
p12b <- test_data_new %>%
group_by(projectID) %>% #group_by(input$x_var, input$group_var) %>%
summarize(n=n()) %>%
as.data.frame
p12b$Type <- c("Test")
p12c <- val_data_new %>%
group_by(projectID) %>% #group_by(input$x_var, input$group_var) %>%
summarize(n=n()) %>%
as.data.frame
p12c$Type <- c("Val")
d12 <- rbind(p12, p12a, p12b, p12c)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
ggplot(data=d12, aes(x=projectID, y=n, fill=Type)) +
geom_bar(stat="identity",  position=position_dodge2())+
#geom_text(aes(label=n), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=n), vjust=1.6, color="white",
position = position_dodge(0.9), size=3)+
#scale_fill_brewer(palette="Paired", labels=c('No', 'Yes'))+
ylab('Number of labelled images') +
xlab('Project') +
labs(fill="Type") +
#scale_fill_discrete() +
theme_minimal(base_size = 12)
p13 <- d %>%
group_by(classificationMethod) %>% #group_by(input$x_var, input$group_var) %>%
summarize(n=n()) %>%
as.data.frame
p13$Type <- c("Full")
p13a <- train_data_new %>%
group_by(classificationMethod) %>% #group_by(input$x_var, input$group_var) %>%
summarize(n=n()) %>%
as.data.frame
p13a$Type <- c("Train")
p13b <- test_data_new %>%
group_by(classificationMethod) %>% #group_by(input$x_var, input$group_var) %>%
summarize(n=n()) %>%
as.data.frame
p13b$Type <- c("Test")
p13c <- val_data_new %>%
group_by(classificationMethod) %>% #group_by(input$x_var, input$group_var) %>%
summarize(n=n()) %>%
as.data.frame
p13c$Type <- c("Val")
d13 <- rbind(p13, p13a, p13b, p13c)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
ggplot(data=d13, aes(x=classificationMethod, y=n, fill=Type)) +
geom_bar(stat="identity",  position=position_dodge2())+
#geom_text(aes(label=n), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=n), vjust=1.6, color="white",
position = position_dodge(0.9), size=3)+
#scale_fill_brewer(palette="Paired", labels=c('No', 'Yes'))+
ylab('Number of labelled images') +
xlab('Bbox drawn by') +
labs(fill="Type") +
#scale_fill_discrete() +
theme_minimal(base_size = 12)
#we need to rbind all data and add a new colum split with the corresponding split level
test_data_new$split <- c("test")
train_data_new$split <- c("train")
val_data_new$split <- c("val")
full_df <- rbind(test_data_new, train_data_new, val_data_new)
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/CV4Ecology-summer-school/FinalDataset")
## for all in one file
write.csv(full_df, "SubsetAgeWithSplit.csv", row.names = F)
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/CV4Ecology-summer-school/FinalDataset")
## for all in one file
write.csv(full_df, "SubsetAgeWithSplit.csv", row.names = F)
#for seperate csv for test, train, val
write.csv(test_data_new, "SubsetAgeTest.csv", row.names = F)
write.csv(train_data_new, "SubsetAgeTrain.csv", row.names = F)
write.csv(val_data_new, "SubsetAgeVal.csv", row.names = F)
install.packages("jsonlite")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("jsonlite")
library(jsonlite)
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier\predictions")
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ',')
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ',')
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ',')
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier")
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ',')
d <- read.csv(file = 'predictions/predictions_sex_basic.csv', dec = '.', sep = ',')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(lubridate)
library(maptools)
library(leaflet)
# load data
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/CV4Ecology-summer-school")
d <- read.csv(file = 'FinalDataset/dataset.csv', dec = '.', sep = ',')
# prepare data
d$deploymentID<-factor(d$deploymentID)
d$observationID<-factor(d$observationID)
#d$sequenceID<-factor(d$sequenceID)
d$fileName <- factor (d$fileName)
d$mediaID<-factor(d$mediaID)
d$observationType<-factor(d$observationType)
d$cameraSetup<-factor(d$cameraSetup)
#d$taxonID<-factor(d$taxonID)
d$scientificName<-factor(d$scientificName)
d$count<-as.numeric(d$count)
d$countNew<-as.numeric(d$countNew)
d$lifeStage<-factor(d$lifeStage)
d$sex<-factor(d$sex)
#d$behaviour<-factor(d$behaviour)
#d$individualID<-factor(d$individualID)
d$classificationConfidence<-as.numeric(d$classificationConfidence)
d$classificationMethod<-factor(d$classificationMethod)
d$classifiedBy<-factor(d$classifiedBy)
#d$classificationTimestamp<-factor(d$classificationTimestamp)
#d$comments<-factor(d$comments)
d$bbox<-factor(d$bbox)
d$commonName<-factor(d$commonName)
d$project<-factor(d$project)
d$DeploymentID_FileName <- factor (d$DeploymentID_FileName)
d$region <- factor(d$region)
d$CamBrand <- factor(d$CamBrand)
d$longitude <- as.numeric(d$longitude)
d$latitude <- as.numeric(d$latitude)
d$hour <- factor(d$hour)
d$month <- factor(d$month)
d$night_image <- factor(d$night_image)
d$date_time <- as.POSIXct(d$date_time, tz="Europe/Amsterdam", format="%Y-%m-%d %H:%M:%S")
str(d$date_time)
d$date <- as.POSIXct(d$date, tz="Europe/Amsterdam", format="%Y-%m-%d")
d$dusk <- as.POSIXct(d$dusk, tz="Europe/Amsterdam", format="%Y-%m-%d %H:%M:%S")
d$dawn <- as.POSIXct(d$dawn, tz="Europe/Amsterdam", format="%Y-%m-%d %H:%M:%S")
# clean data
#d$observationType[d$observationType == ""] <- NA
summary(d$observationType)
#d <- d[!is.na(d$observationType),] #remove na in observationtype
summary(d$scientificName)
#d$scientificName[d$scientificName == ""] <- NA
summary(d$lifeStage)
#d$lifeStage[d$lifeStage == ""] <- NA
d$lifeStage <- factor(ifelse(d$lifeStage == "Adult", "adult",
ifelse(d$lifeStage == "Juvenile", "juvenile",
ifelse(d$lifeStage == "Sub-adult", "subadult",
ifelse(d$lifeStage == "Unknown", NA,
ifelse(d$lifeStage == "unknown", NA, as.character(d$lifeStage)))))))
summary(d$lifeStage)
# change age classes to <1 (=juvenile) and >1 (=adult)
d$age <- factor(ifelse(d$lifeStage == "adult", "adult",
ifelse(d$lifeStage == "juvenile", "juvenile",
ifelse(d$lifeStage == "offspring", "juvenile",
ifelse(d$lifeStage == "subadult", "adult", as.character(d$lifeStage))))))
summary(d$age)
summary(d$sex)
#d$sex[d$sex == ""] <- NA
d$sex <- factor(ifelse(d$sex == "Female", "female",
ifelse(d$sex == "Male", "male",
ifelse(d$sex == "Unknown", NA,
ifelse(d$sex == "unknown", NA, as.character(d$sex))))))
summary(d$sex)
#summary(d$classificationMethod)
#d$classificationMethod <- factor(ifelse(d$observationType == "animal" | is.na(d$classificationMethod) , "human",
#                                       ifelse(d$classificationMethod == "maschine", "maschine", as.character(d$classificationMethod))))
summary(d$bbox)
d$bbox[d$bbox == ""] <- NA
d$bboxYN <- factor(ifelse(is.na(d$bbox), "No", "Yes" ))
summary(d$bboxYN)
d$year <- year(d$date)
d$year <- factor(d$year)
summary(d$classificationMethod)
d$classificationMethod <- factor(ifelse(d$classificationMethod == "human", "human",
ifelse(d$classificationMethod == "machine", "MegaDetector",
ifelse(d$classificationMethod == "maschine", "MegaDetector", NA))))
summary(d$classificationMethod)
# select only records with bounding boxes
df <- d
summary(df$bboxYN)
df <- subset(df, bboxYN=="Yes")
summary(df$scientificName)
# Overview data dama dama
SubsetAllSpc_df <- df %>%
filter(!is.na(scientificName)) %>%
group_by(deploymentID,night_image, scientificName, month, classificationMethod) %>%
summarize(n=n()) %>%
as.data.frame
View(SubsetAllSpc_df)
SubsetAllSpc_N <- df %>%
filter(!is.na(scientificName)) %>%
group_by(deploymentID,night_image, scientificName, month, classificationMethod) %>%
summarize(n=n()) %>%
as.data.frame
SubsetAllSpc_N %>%
ggplot() +
geom_histogram(aes(x = n), fill = "grey", color = "black", bins = 100) +
ggtitle("Subset number of images (Dama dama)") +
ylab('Number of occurences per group') +
xlab('Number of images') +
theme_minimal(base_size = 12)
SubsetAllSpc_N %>%
ggplot() +
geom_histogram(aes(x = n), fill = "grey", color = "black", bins = 100) +
ggtitle("Subset number of images") +
ylab('Number of occurences per group') +
xlab('Number of images') +
theme_minimal(base_size = 12)
View(SubsetAllSpc_N)
df %>%
filter(!is.na(scientificName)) %>%
group_by(scientificName) %>%
summarize(n=n()) %>%
as.data.frame
NSpecies <- df %>%
filter(!is.na(scientificName)) %>%
group_by(scientificName) %>%
summarize(n=n()) %>%
as.data.frame
View(NSpecies)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
ggplot(data=NSpecies, aes(x=scientificName, y=n)) +
geom_bar(stat="identity",  position=position_dodge())+
#geom_text(aes(label=n), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=n), vjust=1.6, color="white",
position = position_dodge(0.9), size=4)+
scale_fill_brewer(palette="Paired")+
ylab('Number of labelled images') +
xlab('Species') +
#labs(fill="Bbox") +
theme_minimal(base_size = 12)
View(NSpecies)
NSpeciesSub <- NSpecies %>%
filter(n<=25) %>%
#group_by(scientificName) %>%
#summarize(n=n()) %>%
as.data.frame
View(NSpeciesSub)
NSpeciesSub <- NSpecies %>%
filter(n>=25) %>%
#group_by(scientificName) %>%
#summarize(n=n()) %>%
as.data.frame
View(NSpeciesSub)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
ggplot(data=NSpeciesSub, aes(x=scientificName, y=n)) +
geom_bar(stat="identity",  position=position_dodge())+
#geom_text(aes(label=n), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=n), vjust=1.6, color="white",
position = position_dodge(0.9), size=4)+
scale_fill_brewer(palette="Paired")+
ylab('Number of labelled images') +
xlab('Species') +
#labs(fill="Bbox") +
theme_minimal(base_size = 12)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
ggplot(data=NSpeciesSub, aes(x=scientificName, y=n)) +
geom_bar(stat="identity",  position=position_dodge())+
#geom_text(aes(label=n), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=n), vjust=1.6, color="white",
position = position_dodge(0.9), size=4)+
scale_fill_brewer(palette="Paired")+
ylab('Number of labelled images') +
xlab('Species') +
#labs(fill="Bbox") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
View(NSpecies)
NSpeciesSub <- NSpecies %>%
filter(n>=100) %>%
#group_by(scientificName) %>%
#summarize(n=n()) %>%
as.data.frame
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
ggplot(data=NSpeciesSub, aes(x=scientificName, y=n)) +
geom_bar(stat="identity",  position=position_dodge())+
#geom_text(aes(label=n), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=n), vjust=1.6, color="white",
position = position_dodge(0.9), size=4)+
scale_fill_brewer(palette="Paired")+
ylab('Number of labelled images') +
xlab('Species') +
#labs(fill="Bbox") +
theme_minimal(base_size = 12) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# link the subset with nr species to the dataset of species
df_spp_sub <- left_join(df, NSpeciesSub, by="scientificName")
View(df_spp_sub)
knitr::opts_chunk$set(echo = TRUE, fig.width=8, fig.height=6)
#Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
ggplot(data=d6, aes(x=region, y=n, fill=Type)) +
geom_bar(stat="identity",  position=position_dodge2())+
#geom_text(aes(label=n), vjust=1.6, color="white", size=3.5)+
geom_text(aes(label=n), vjust=1.6, color="white",
position = position_dodge(0.9), size=3)+
#scale_fill_brewer(palette="Paired", labels=c('No', 'Yes'))+
ylab('Number of labelled images') +
xlab('Region') +
labs(fill="Type") +
#scale_fill_discrete() +
theme_minimal(base_size = 12)
p6 <- d %>%
group_by(region) %>% #group_by(input$x_var, input$group_var) %>%
summarize(n=n()) %>%
as.data.frame
#load library
library(caret)
library(dplyr)
library(ggplot2)
library(lubridate)
library(maptools)
knitr::opts_chunk$set(echo = TRUE, fig.width=8, fig.height=6)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("jsonlite")
library(jsonlite)
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ',')
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ',')
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ',')
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = '/')
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ';')
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ',')
getwd()
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
getwd()
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
getwd()
dir.exists("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
knitr::opts_chunk$set(echo = TRUE, root.dir="C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
knitr::opts_knit$set(root.dir = '/tmp')
getwd()
knitr::opts_chunk$set(echo = TRUE, root.dir="C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
getwd()
setwd("C:/Users/miff0001/OneDrive - Sveriges lantbruksuniversitet/Dokument/OneDrive SLU/SLU/Viltbild/Conferences_workshops/ct_classifier/predictions")
getwd()
d <- read.csv(file = 'predictions_sex_basic.csv', dec = '.', sep = ',')
View(d)
View(d)
# library
library(ggplot2)
library(dplyr)
library(reshape)
install.packages("reshape")
install.packages("reshape2")
cast(d, pred_female_softmax ~ pred_male_softmax)
library(reshape2)
cast(d, pred_female_softmax ~ pred_male_softmax)
dcast(d, pred_female_softmax ~ pred_male_softmax)
dt <- dcast(d, pred_female_softmax ~ pred_male_softmax)
df_long <- melt(d, id.vars = NULL, variable.name = "pred", value.name = "value")
df_long$pred <- ifelse(df_long$pred == "female_pred", "female", "male")
View(df_long)
df_long <- melt(d, id.vars = NULL, variable.name = "pred", value.name = "value")
df_long$pred <- ifelse(df_long$pred == "pred_female_softmax", "female", "male")
df_long <- melt(d, id.vars = NULL, variable.name = "pred", value.name = "value")
View(df_long)
library(tidyverse)
df_long <- d %>%
gather(key = "pred", value = "value", female_pred, male_pred) %>%
mutate(pred = ifelse(pred == "female_pred", "female", "male"))
df_long <- d %>%
gather(key = "pred", value = "value", pred_female_softmax, pred_male_softmax) %>%
mutate(pred = ifelse(pred == "female_pred", "female", "male"))
View(df_long)
# Represent it
p <- d %>%
ggplot( aes(x=value, fill=pred)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
library(hrbrthemes)
install.packages("hrbrthemes")
library(hrbrthemes)
# Represent it
p <- d %>%
ggplot( aes(x=value, fill=pred)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p
# Represent it
p <- df_long %>%
ggplot( aes(x=value, fill=pred)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p
View(df_long)
df_long <- d %>%
gather(key = "sex", value = "value", pred_female_softmax, pred_male_softmax) %>%
mutate(pred = ifelse(pred == "female_pred", "female", "male"))
df_long <- d %>%
gather(key = "sex", value = "value", pred_female_softmax, pred_male_softmax) %>%
mutate(sex = ifelse(sex == "female_pred", "female", "male"))
df_long$sex <- factor(df_long$sex)
# Represent it
p <- df_long %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p
View(df_long)
df_long <- d %>%
gather(key = "sex", value = "value", pred_female_softmax, pred_male_softmax) %>%
mutate(sex = ifelse(sex == "pred_female_softmax", "female", "male"))
library(tidyverse)
df_long <- d %>%
gather(key = "sex", value = "value", pred_female_softmax, pred_male_softmax) %>%
mutate(sex = ifelse(sex == "pred_female_softmax", "female", "male"))
df_long$sex <- factor(df_long$sex)
# Represent it
p <- df_long %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p
# Represent it
p <- df_long %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
xlab("prediction score") + # for the x axis label
labs(fill="")
p
View(df_long)
View(d)
ggplot(df, aes(x=pred_female_softmax)) +
geom_histogram(color="black", fill="white")
ggplot(d, aes(x=pred_female_softmax)) +
geom_histogram(color="black", fill="white")
ggplot(d, aes(x=pred_male_softmax)) +
geom_histogram(color="black", fill="white")
df_long1 <- d %>%
gather(key = "sex", value = "value", pred_female_softmax, pred_male_softmax) %>%
mutate(sex = ifelse(sex == "pred_female_softmax", "female", "not female"))
df_long1$sex <- factor(df_long1$sex)
p <- df_long1 %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
xlab("prediction score") + # for the x axis label
labs(fill="")
p
p1 <- df_long1 %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
xlab("prediction score") + # for the x axis label
labs(fill="")
p1
p <- df_long %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
xlab("prediction score") + # for the x axis label
labs(fill="")
p
df_long2 <- d %>%
gather(key = "sex", value = "value", pred_female_softmax, pred_male_softmax) %>%
mutate(sex = ifelse(sex == "pred_male_softmax", "male", "not male"))
df_long2$sex <- factor(df_long2$sex)
p2 <- df_long2 %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
xlab("prediction score") + # for the x axis label
labs(fill="")
p2
df_long <- d %>%
gather(key = "sex", value = "value", pred_female_softmax, pred_male_softmax) %>%
mutate(sex = ifelse(sex == "pred_female", "female", "male"))
df_long$sex <- factor(df_long$sex)
p <- df_long %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
xlab("prediction score") + # for the x axis label
labs(fill="")
p
df_long <- d %>%
gather(key = "sex", value = "value", pred_female_softmax, pred_male_softmax) %>%
mutate(sex = ifelse(sex == "pred_female", "female", "male"))
df_long$sex <- factor(df_long$sex)
p <- df_long %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
xlab("prediction score") + # for the x axis label
labs(fill="")
p
df_long <- d %>%
gather(key = "sex", value = "value", pred_female, pred_male) %>%
mutate(sex = ifelse(sex == "pred_female", "female", "male"))
df_long$sex <- factor(df_long$sex)
p <- df_long %>%
ggplot(aes(x=value, fill=sex)) +
geom_histogram(color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
xlab("prediction score") + # for the x axis label
labs(fill="")
p
